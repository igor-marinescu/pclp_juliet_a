# This file is part of the pclp_juliet_a distribution.
# Copyright (c) 2024 Igor Marinescu (igor.marinescu@gmail.com).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
""" PclpInterpreter class """

#-------------------------------------------------------------------------------
class PclpInterpreter:
    """ PclpInterpreter - interprets the "short" output file generated by PC-lint.

        The generated result:
            self.modules = [(module_name1, module_type1, module1_issues[...]),
                            (module_name2, module_type2, module2_issues[...]),
                                ...
                            ]

            where moduleX_issues = [(message1_line, message1_type, message1_number),
                                    (message2_line, message2_type, message2_number),
                                        ...
                                    ]

        Example of a file:

            --- Module:   CWE835_Infinite_Loop__do_01.c (C)
            CWE835_Infinite_Loop__do_01.c, 43, info, 793
            CWE835_Infinite_Loop__do_01.c, 45, info, 746
            --- Module Wrap-up

        generates:

            self.modules = ['CWE835_Infinite_Loop__do_01.c', 'C', [
                                (43, ' info', 793),
                                (45, ' info', 746)
                                ]
                            ]
    """

    #---------------------------------------------------------------------------
    def __init__(self):
        self.modules = []

    #---------------------------------------------------------------------------
    def process_file(self, filename):
        """ Process an output file generated by PC-lint .
        """

        line_idx = 0

        module_name = ""
        module_type = ""
        module_issues = []

        with open(filename, encoding='UTF-8') as input_file:
            for line in input_file:
                line_idx = line_idx + 1
                line = line.rstrip()

                # Does string starts with '--- ' ?
                if line.startswith("--- "):

                    # --- Thread messages (ignore)
                    if line.startswith("--- Thread"):
                        pass

                    # --- Global (ignore)
                    elif line.startswith("--- Global"):
                        pass

                    # --- Module:   CWE124_Buffer_Underwrite__char_alloca_cpy_01.c (C)
                    elif line.startswith("--- Module:"):

                        # Store previous info
                        if module_name:
                            self.modules.append((module_name, module_type, module_issues[:]))

                        module_issues.clear()
                        module_name = ""
                        module_type = ""

                        idx0 = line.find("(")
                        idx1 = line.find(")")
                        if idx0 > 0 and idx1 > 0 and idx0 < idx1:
                            module_name = line[11:idx0].strip()
                            module_type = line[idx0 + 1:idx1]
                        else:
                            return (filename, line_idx, line)

                elif line:
                    # CWE124_Buffer_Underwrite__char_alloca_cpy_02.c, 29, info, 774
                    # <--------------- line_list[0] -------------->|<[1]>|<[2]>|<[3]>|
                    # PCLint invoked with: -"format=%f, %l, %t, %n"
                    line_list = line.split(",")
                    if len(line_list) >= 4:
                        if line_list[0] == module_name:
                            module_issues.append(\
                                (int(line_list[1]), line_list[2], int(line_list[3])))
                    else:
                        return (filename, line_idx, line)

        if module_name:
            self.modules.append((module_name, module_type, module_issues[:]))

        return None

    #---------------------------------------------------------------------------
    def show_modules(self, output):
        """ Show the result generated by the process_file method after interpreting
            the pclint output file.
        """

        for m in self.modules:
            print("", file = output)

            # m[0]=module_name, m[1]=module_type, m[2]=module_issues[:]
            # module_issue =
            #   (%l=line number, %t=message type (error, info, warning), %n=message number)
            print(m[0], m[1], file = output)
            if m[2]:
                for issue in m[2]:
                    print(issue, file = output)
